[alias]
    up = !git push -u origin "$(git rev-parse --abbrev-ref HEAD)"
    pushf = push --force-with-lease
    delete-branch = push origin --delete
    prune-branches = !git for-each-ref --shell --format='b="$(echo %(refname) | cut -sd / -f 3-)" && [ "$b" != master ] && git branch -d "$b"' refs/heads/ | sh

    # open a pull request, echos the url to the pr
    pr = "!f(){ \
        git up; \
        hub pull-request -m \"$(git log -1 --pretty=format:'%B')\" --edit -b master -h \"$(git rev-parse --abbrev-ref HEAD)\"; \
    }; f"
    ; prco = "!hub pr list | fzf | awk '{ print $1 }' | sed 's/^#\\([0-9]\\+\\)/\\1/' | hub pr checkout \"$(cat)\""
    prco = "!fzf-checkout pr"
    brco = "!fzf-checkout branch"
    ; brco = "!f() { \
    ;     local branch=\"$(git branch | fzf | sed 's/\\*//'\"; \
    ;     if [ -n "$branch" ]; then \
    ;         git co \"$(echo "$branch" | awk '{ print $1 }')\"; \
    ;     else; \
    ;         echo \"No branch selected\"; \
    ;     fi; \
    ; }; f"

    # list of the 10 last branches you checked out
    recent = for-each-ref --sort=-committerdate --count=10 --format='%(refname:short)' refs/heads/

    # Listing things
    branches = branch -a
    tags = tag
    stashes = stash list
    graph = log --graph --oneline --decorate
    ls = !git-ls

    # Committing
    amend = commit --amend

    # Bisecting
    good = bisect good
    bad = bisect bad

    # Checkout
    co = checkout
    cob = checkout -b

    # Pulling
    prom = pull --rebase origin master

    # List commits since last tag, good for previewing a deploy
    to-send = "!f() { git log --pretty=oneline --abbrev-commit $(git describe --tags --abbrev=0 --match \"*$1*\")..master ${@:2}; }; f"
[push]
    default = simple
[user]
    name = Paul Harper
    email = benekastah@gmail.com
[diff]
    tool = vimdiff
[difftool]
    prompt = false
[merge]
    tool = vimdiff
[mergetool]
    prompt = false
[core]
    editor = kak

# This belongs at the end
[include]
    path = "~/.gitconfig.local"
[grep]
    patternType = extended
[branch]
    autoSetupRebase = always
