
set-option -g default-command "which reattach-to-user-namespace >/dev/null 2>/dev/null && reattach-to-user-namespace -l $SHELL 2>/dev/null || $SHELL"

set -g update-environment "DISPLAY SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY TM SSH_AUTH_SOCK BACKGROUND"

set -g status-right "#[fg=white,bold,bg=blue]#(~/bin/tmuxstatus -n 3 -j ' ♦ ' --pre '⍾ ' --post ' ')#[default] #H #(TZ='America/Los_Angeles' date +'%%k:%%M %%a %%b %%#d')"
set -g status-right-length 451

# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal screen-256color

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

# Create splits and vertical splits
bind-key v split-window -h
bind-key ^V split-window -h
bind-key s split-window
bind-key ^S split-window

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind-key J resize-pane -D
bind-key K resize-pane -U
bind-key H resize-pane -L
bind-key L resize-pane -R

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
# bind e setw synchronize-panes on
# bind E setw synchronize-panes off

# set first window to index 1 (not 0) to map more to the keyboard layout...
set -g base-index 1
set -g pane-base-index 1
set-option -g renumber-windows on

# No escape time for vi mode
set -sg escape-time 0

# Bigger history
set -g history-limit 10000

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Move windows back and forth
bind-key C-h swap-window -t -1
bind-key C-l swap-window -t +1
# bind-key -n C-[ next-window
# bind-key -n C-] previous-window

bind-key a command-prompt -p '(session name)' \
  'if "tmux has -t '"'%1'"'" \
    "attach -t '"'%1'"'" \
    "new -s '"'%1'"'"'

bind-key b detach -a

bind-key = select-layout even-vertical
bind-key + select-layout even-horizontal
